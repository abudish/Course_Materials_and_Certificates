install.packages("benchmarkme")
install.packages("benchmarkme")
install.packages("benchmarkme")
install.packages("benchmarkme")
library(benchmarkme)
help(package = 'benchmarkme')
res <- benchmark_std(runs = 3)
plot(res)
upload_results(res)
get_cpu()
get_ram()
get_available_benchmarks()
?benchmark_io
res_io <- benchmark_io()
plot(res_io)
installed.packages('tidyverse')
install.packages("tidyverse")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
get_cpu()
#########################################
# ---------------------------------------
# Functions
# ---------------------------------------
#########################################
# One simulation of the Monty Hall game
onerun <- function(.){ # Function of no arguments
doors <- 1:3
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice==prize.door) return(0) else return(1) # Always switch
}
# Many simulations of Monty Hall games
MontyHall <- function(runs, cores=detectCores()){
require(parallel)
# clusterApply() for Windows
if (Sys.info()[1] == "Windows"){
cl <- makeCluster(cores)
runtime <- system.time({
avg <- mean(unlist(clusterApply(cl=cl, x=1:runs, fun=onerun)))
})[3]
stopCluster(cl) # Don't forget to do this--I frequently do
# mclapply() for everybody else
} else {
runtime <- system.time({
avg <- mean(unlist(mclapply(X=1:runs, FUN=onerun, mc.cores=cores)))
})[3]
}
return(list(avg=avg, runtime=runtime))
}
#########################################
# ---------------------------------------
# Outputs
# ---------------------------------------
#########################################
run1 <- rbind(c(MontyHall(1e6, cores=1), "cores"=1))
run2 <- rbind(c(MontyHall(1e6, cores=4), "cores"=4))
run3 <- rbind(c(MontyHall(1e6, cores=8), "cores"=8))
rbind(run1, run2, run3)
install.packages("bigrquery")
install.packages("devtools")
library(devtools)
install_github("trestletech/shinyTable")
help(package = 'shinyTable')
library(shiny)
runApp(system.file("examples/01-simple", package = "shinyTable"))
?DT::renderDataTable()
library(shiny)
runExample("09_upload")
?fileInput
install.packages("ggiraph")
help(package = 'ggiraph')
help(packages = 'ggiraph')
help(package = 'ggiraph')
install.packages('rvg')
install.packages("ggiraph")
help(package = 'ggiraph')
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(id = "sidebarmenu",
menuItem("A", tabName = "a",  icon = icon("group", lib="font-awesome")),
menuItem("B", tabName = "b", icon = icon("check-circle", lib = "font-awesome")),
conditionalPanel("input.sidebarmenu === 'b'",
sliderInput("b", "Under sidebarMenu", 1, 100, 50)
),
conditionalPanel("input.sidebarmenu === 'b'",
menuItem("C", tabName = "c", icon = icon("check-circle", lib = "font-awesome"))
)
)
),
dashboardBody()
)
server <- function(input, output) {}
shinyApp(ui, server)
setwd("~/R_related/Course_Materials_and_Certificates/FlowingData/00 Visualization in R/Week_3/02 Working with Geographic Data")
# Load location data and default plot
costcos <- read.csv("http://projects.flowingdata.com/tut/data/costcos-geocoded.csv", sep=",")
plot(costcos$Longitude, costcos$Latitude)
library(maps)
library(mapproj)
map("state", projection="albers", param=c(39,45), lwd=1, col="#cccccc")
projected_coords <- mapproject(costcos$Longitude, costcos$Latitude)
points(projected_coords, pch=21, col="red", cex=1)
projected_coords <- mapproject(costcos$Longitude, costcos$Latitude, projection="albers", parameters=c(39,45))
head(projected_coords$x)
head(projected_coords$y)
head(costcos[,c("Longitude", "Latitude")])
?mapproject
