install.packages("benchmarkme")
install.packages("benchmarkme")
install.packages("benchmarkme")
install.packages("benchmarkme")
library(benchmarkme)
help(package = 'benchmarkme')
res <- benchmark_std(runs = 3)
plot(res)
upload_results(res)
get_cpu()
get_ram()
get_available_benchmarks()
?benchmark_io
res_io <- benchmark_io()
plot(res_io)
installed.packages('tidyverse')
install.packages("tidyverse")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
get_cpu()
#########################################
# ---------------------------------------
# Functions
# ---------------------------------------
#########################################
# One simulation of the Monty Hall game
onerun <- function(.){ # Function of no arguments
doors <- 1:3
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice==prize.door) return(0) else return(1) # Always switch
}
# Many simulations of Monty Hall games
MontyHall <- function(runs, cores=detectCores()){
require(parallel)
# clusterApply() for Windows
if (Sys.info()[1] == "Windows"){
cl <- makeCluster(cores)
runtime <- system.time({
avg <- mean(unlist(clusterApply(cl=cl, x=1:runs, fun=onerun)))
})[3]
stopCluster(cl) # Don't forget to do this--I frequently do
# mclapply() for everybody else
} else {
runtime <- system.time({
avg <- mean(unlist(mclapply(X=1:runs, FUN=onerun, mc.cores=cores)))
})[3]
}
return(list(avg=avg, runtime=runtime))
}
#########################################
# ---------------------------------------
# Outputs
# ---------------------------------------
#########################################
run1 <- rbind(c(MontyHall(1e6, cores=1), "cores"=1))
run2 <- rbind(c(MontyHall(1e6, cores=4), "cores"=4))
run3 <- rbind(c(MontyHall(1e6, cores=8), "cores"=8))
rbind(run1, run2, run3)
install.packages("bigrquery")
install.packages("devtools")
library(devtools)
install_github("trestletech/shinyTable")
help(package = 'shinyTable')
library(shiny)
runApp(system.file("examples/01-simple", package = "shinyTable"))
?DT::renderDataTable()
library(shiny)
runExample("09_upload")
?fileInput
install.packages("ggiraph")
help(package = 'ggiraph')
help(packages = 'ggiraph')
help(package = 'ggiraph')
install.packages('rvg')
install.packages("ggiraph")
help(package = 'ggiraph')
fakedata <- c(5, 4, 3, 2, 1)
pie(fakedata, clockwise=TRUE, labels=fakedata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white")
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col="black")
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=c("blue", "black"))
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=c("black", "dark gray", "gray", "light gray", "white"))
# Number of data points
numdata <- length(fakedata)
numdata
# Gray color scheme
grays <- gray(0:numdata / numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=grays)
# Heat scheme from yellow to red
heatcols <- heat.colors(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=heatcols)
rainbowcols <- rainbow(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=rainbowcols)
# Topographic color scheme
topocols <- topo.colors(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=topocols)
library(RColorBrewer)
# Blue color scheme from ColorBrewer
blues <- brewer.pal(numdata, "Blues")
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=blues)
# Reverse the previous blue color scheme
blues.rev <- rev(blues)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=blues.rev)
?brewer.pal
Pastel1 <- brewer.pal(numdata, "Pastel1")
# Reverse the previous blue color scheme
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=Pastel1)
colors()
pal <- colorRampPalette(c("light gray", "red"))
colors <- pal(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=colors)
pal <- colorRampPalette(c("wheat4", "pink"))
colors <- pal(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=colors)
pal <- colorRampPalette(c("tan1", "pink"))
colors <- pal(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=colors)
# Some more fake data and default colors
morefakedata <- c(5, 3, 2, 6, 8, 1, 3)
pie(morefakedata, clockwise=TRUE, labels=morefakedata)
# Build color ramp and palette
fakemax <- max(morefakedata)
pal2 <- colorRampPalette(c("#f2f2f2", "#821122"))
numshades <- 20
colors2 <- pal2(numshades)
# Make chart with color ramp
morecolors <- c()
for (i in 1:length(morefakedata)) {
colindex <- round((morefakedata[i] / fakemax) * numshades)
morecolors <- c(morecolors, colors2[colindex])
}
pie(morefakedata, clockwise=TRUE, labels=morefakedata, border="white", col=morecolors)
setwd("~/R_related/Course_Materials_and_Certificates/FlowingData/Week_2/02 Separate Chart Components/03 How to Make a Heatmap â€“ a Quick and Easy Solution")
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
View(nba)
nba <- nba[order(nba$PTS),]
View(nba)
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
View(nba_matrix)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
