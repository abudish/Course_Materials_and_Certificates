install.packages("benchmarkme")
install.packages("benchmarkme")
install.packages("benchmarkme")
install.packages("benchmarkme")
library(benchmarkme)
help(package = 'benchmarkme')
res <- benchmark_std(runs = 3)
plot(res)
upload_results(res)
get_cpu()
get_ram()
get_available_benchmarks()
?benchmark_io
res_io <- benchmark_io()
plot(res_io)
installed.packages('tidyverse')
install.packages("tidyverse")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
get_cpu()
#########################################
# ---------------------------------------
# Functions
# ---------------------------------------
#########################################
# One simulation of the Monty Hall game
onerun <- function(.){ # Function of no arguments
doors <- 1:3
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice==prize.door) return(0) else return(1) # Always switch
}
# Many simulations of Monty Hall games
MontyHall <- function(runs, cores=detectCores()){
require(parallel)
# clusterApply() for Windows
if (Sys.info()[1] == "Windows"){
cl <- makeCluster(cores)
runtime <- system.time({
avg <- mean(unlist(clusterApply(cl=cl, x=1:runs, fun=onerun)))
})[3]
stopCluster(cl) # Don't forget to do this--I frequently do
# mclapply() for everybody else
} else {
runtime <- system.time({
avg <- mean(unlist(mclapply(X=1:runs, FUN=onerun, mc.cores=cores)))
})[3]
}
return(list(avg=avg, runtime=runtime))
}
#########################################
# ---------------------------------------
# Outputs
# ---------------------------------------
#########################################
run1 <- rbind(c(MontyHall(1e6, cores=1), "cores"=1))
run2 <- rbind(c(MontyHall(1e6, cores=4), "cores"=4))
run3 <- rbind(c(MontyHall(1e6, cores=8), "cores"=8))
rbind(run1, run2, run3)
install.packages("bigrquery")
install.packages("devtools")
library(devtools)
install_github("trestletech/shinyTable")
help(package = 'shinyTable')
library(shiny)
runApp(system.file("examples/01-simple", package = "shinyTable"))
?DT::renderDataTable()
library(shiny)
runExample("09_upload")
?fileInput
install.packages("ggiraph")
help(package = 'ggiraph')
help(packages = 'ggiraph')
help(package = 'ggiraph')
install.packages('rvg')
install.packages("ggiraph")
help(package = 'ggiraph')
# Hello, world.
plot(0, 0, type="n", xlim=c(0, 2), ylim=c(0, 2), xlab="", ylab="")
text(1, 1, 'Hello, world.')
# Hello, world. x3
plot(0, 0, type="n", xlim=c(0, 2), ylim=c(0, 2), xlab="", ylab="")
text(1, 1, 'Hello, world.')     # Middle
text(1, 2, 'Hello, top of world.')  # Top
text(1, 0, 'Hello, bottom of world.')   # Bottom
plot(0, 0, type="n", xlim=c(0, 2), ylim=c(0, 2), xlab="", ylab="")
x <- c(1, 1, 1)
y <- c(1, 2, 0)
labels <- c('Hello, world.', 'Hello, top of world.', 'Hello, bottom of world.')
text(x, y, labels)
# Available font families
names(pdfFonts())
plot(0, 0, type="n", xlim=c(0, 2), ylim=c(0, 2), xlab="", ylab="")
text(x, y, labels, family='Courier')
text(1, 1.5, 'Helvetica', family='Helvetica')
text(1, 0.5, 'Bookman', family='Palatino')
# Font size
plot(0, 0, type="n", xlim=c(0, 2), ylim=c(0, 2), xlab="", ylab="")
text(x, y, labels, family='Courier', cex=1.0)
text(1, 1.5, 'Helvetica', family='Helvetica', cex=3.0)
text(1, 0.5, 'Bookman', family='Palatino', cex=0.5)
# Color
plot(0, 0, type="n", xlim=c(0, 2), ylim=c(0,20), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
rect(0, 0, 2, 30, col="black")
for (i in 1:40) {
text(1, i/2, colors()[i], col=colors()[i], cex=runif(1, 0.2, 1.3))
}
getwd()
setwd("~/R_related/Course_Materials_and_Certificates/FlowingData/Week_2/02 Separate Chart Components/04 How to Display Text in R")
# Put it into practice with real data
load('unisexCnts.RData')
nameTotals <- rowSums(unisexCnts)
plot(0, 0, type="n", xlim=c(-5, 105), ylim=c(-5,105), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
x <- runif(length(nameTotals), 0, 100)
y <- runif(length(nameTotals), 0, 100)
text(x, y, names(nameTotals), cex=2*sqrt(nameTotals/max(nameTotals)))
# Supplement the area graph (http://datafl.ws/21a) with labels
source('areagraph.R')
areaGraph(unisexCnts)
