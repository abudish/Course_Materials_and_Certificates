install.packages("lmtest")
library(lmtest)
?lrtest
lrtest(fit3, fit4)
anova(fit3, fit4)
lrtest(fit3)
lrtest(fit4)
anova(fit3, fit4)
fit5 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit5)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?influence.measures
?influence.measures
?hatvalues
fit6 <- lm(y~x)
hatvalues(fit6)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the slope dfbeta for the point with the highest hat value.
fit7 <- lm(y~x)
dfbeta(fit7)
dfbetas(fit7)
influence.measures(fit7)
influence.measures(fit7)
rnorm(2)
rnorm(3)
?rnorm
?betas
install.packages("betas")
?betas
library(betas)
x1 <- rnorm(100)
y <- x1 + rnorm(100, sd = .3)
lm(y ~ x1)
lm(y ~ x1)[2]
library(car)
install.packages("car")
library(car)
?vif
?update
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
1 - resid(fit)[1]/resno
View(hatvalues(fit))
sigma <- 2
df.residual(fit)
deviance(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which = 5)
Sys.getenv("PATH")
Sys.which("pdflatex")
sessionInfo()
install.packages("pandoc")
Sys.getenv("RSTUDIO_PANDOC")
?pandoc
system("pandoc -h")
getwd()
ls()
list.files()
cabal update
?pandoc.convert
?panoc
?pandoc
system("pandoc -s Statistical_Inference_-_Part_1_Simulation_Exercise.html -o Statistical_Inference_-_Part_1_Simulation_Exercise.pdf")
fileName <- "Statistical_Inference_-_Part_1_Simulation_Exercise.rmd"
knit(fileName, encoding = "utf-8")
markdownToHTML("Statistical_Inference_-_Part_1_Simulation_Exercise.md", "Statistical_Inference_-_Part_1_Simulation_Exercise.html")
?knit
library(markdown)
fileName <- "Statistical_Inference_-_Part_1_Simulation_Exercise.rmd"
knit(fileName, encoding = "utf-8")
markdownToHTML("Statistical_Inference_-_Part_1_Simulation_Exercise.md", "Statistical_Inference_-_Part_1_Simulation_Exercise.html")
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
head(mns)
mns = NULL
for (i in 1 : 1000) mns <-  c(mns, mean(runif(40)))
hist(mns)
head(mns)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ . , swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ I(. - Examination) , swiss)
mdl2 <- lm(Fertility ~ . - Examination , swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
?pnorm
hist(rnorm())
hist(rnorm(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rnorm(40)))
hist(mns)
?rnorm
?rexp
?apply
?dexp
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
exps <- 40
lambda <- 0.2
simMns <- NULL
for (i in 1 : 1000) simMns <-  c(simMns, mean(rexp(40, rate = lambda)))
set.seed(1234)
exps <- 40
lambda <- 0.2
simMns <- NULL
for (i in 1 : 1000) simMns <-  c(simMns, mean(rexp(40, rate = lambda)))
hist(simMns)
plot(simMns)
hist(simMns)
abline(v = mean(simMns)x, col = "blue", lwd = 2)
abline(v = mean(simMns), col = "blue", lwd = 2)
abline(v = 5, col = "red", lwd = 1)
?hist
hist(simMns, border = TRUE)
hist(simMns, xlab = "Simulated means")
?lines
lines(simMns)
hist(simMns, xlab = "Simulated means", title = "The distribution of 1000 simulated means of an exponential distribution")
hist(simMns, xlab = "Simulated means", main = "The distribution of 1000 simulated means of an exponential distribution")
abline(v = 1/lambda, col = "red", lwd = 1)
abline(v = mean(simMns), col = "blue", lwd = 1)
var(simMns)
1/lambda^2
?var
library(ggplot2)
?ggplot
ggplot(data = NULL, aes(x=simMns)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data = NULL, aes(x=simMns)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(mean(simMns), colour="blue", linetype="longdash")
ggplot(data = NULL, aes(x=simMns)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + geom_vline(mean(simMns), colour="blue", linetyp="longdash")
p <- ggplot(data = NULL, aes(x=simMns)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
?var
(5*sqrt(40))^2
(5/sqrt(40))^2
(1/(lambda^2))/sqrt(n)
(1/(lambda^2))/sqrt(40)
25/sqrt(40)
5^2/40
var(simMns)
simMns
lines(simMns)
lines(simMns)
qqnorm(simMns)
plot(density(simMns))
hist(simMns)
lines(density(simMns))
hist(simMns, prob = TRUE)
lines(density(simMns))
?density
shapiro.test(simMns)
qqnorm(simMns)
?density
?dnorm
x <- rnorm(1000, 5, 5)
hist(x)
lines(density(x))
head(x)
head(simMns)
lines(density(x))
hist(x, probability = TRUE)
lines(density(x))
hist(x, probability = TRUE)
lines(density(x))
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=5, sd=(5/sqrt(40)))
plot(x,y, type="l", lwd=1)
5/sqrt(40)
sqrt(0.625)
x   <- seq(0,10,length=1000)
y   <- dnorm(x,mean=5, sd=(5/sqrt(40)))
plot(x,y, type="l", lwd=1)
set.seed(999)
n <- 40
lambda <- 0.2
simMns <- NULL
for (i in 1 : 1000) simMns <-  c(simMns, mean(rexp(n, rate = lambda)))
hist(simMns, xlab = "Simulated means",
main = "The distribution of 1000 simulated means \n of an exponential distribution",
prob = TRUE)
hist(simMns, xlab = "Simulated means",
main = "The distribution of 1000 simulated means \n of an exponential distribution",
prob = TRUE)
lines(density(simMns), lwd = 2, col = "blue")
x <- seq(0,10,length=1000)
lines(density(dnorm(x, mean = 1/lambda, sd =(1/lambda)/sqrt(n))), lwd = 2, col = "red")
?density
lines(density(simMns), lwd = 2, col = "blue")
x <- seq(0,10,length=1000)
lines((dnorm(x, mean = 1/lambda, sd =(1/lambda)/sqrt(n)), lwd = 2, col = "red")
y <- dnorm(x, mean = 1/lambda, sd =(1/lambda)/sqrt(n))
lines(y, lwd=2, col="red")
head(y)
plot(x, y)
lines(x, y, lwd=2, col="red")
?legend
?lines
summary(ToothGrowth)
head(ToothGrowth)
?ToothGrowth
View(ToothGrowth)
t <- ToothGrowth
unique(t$supp)
unique(t$dose)
class(t$supp)
class(t$dose)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
?t
boxplot(t$supp)
boxplot(t$dose)
knitr::opts_chunk$set(echo = TRUE)
data("ToothGrowth")
str(ToothGrowth)
View(ToothGrowth)
str(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
boxplot(len ~ supp, data = ToothGrowth)
boxplot(len ~ supp + dose, data = ToothGrowth)
boxplot(len ~ dose, data = ToothGrowth)
boxplot(len ~ supp, data = ToothGrowth)
boxplot(len ~ supp + dose, data = ToothGrowth)
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
plot <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
library(ggplot2)
plot <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
plot
p <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Effect of Dosage and Supplement Type on Tooth Growth")
p +geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Effect of Dosage and Supplement Type on Tooth Growth")
subset()
?subset
subset(ToothGrowth, supp ==VC)
subset(ToothGrowth, supp =="VC")
subset(ToothGrowth, supp =="VC", select = len)
subset(ToothGrowth, supp =="VC" & dose == "0.5")
lenVC0.5 <- subset(ToothGrowth, supp =="VC" & dose == "0.5", select = len)
lenVC1 <- subset(ToothGrowth, supp =="VC" & dose == "1", select = len)
lenVC2 <- subset(ToothGrowth, supp =="VC" & dose == "2", select = len)
lenOJ0.5 <- subset(ToothGrowth, supp =="OJ" & dose == "0.5", select = len)
lenOJ1 <- subset(ToothGrowth, supp =="OJ" & dose == "1", select = len)
lenOJ2 <- subset(ToothGrowth, supp =="OJ" & dose == "2", select = len)
class(lenOJ0.5)
lenVC1-lenVC0.5
t.test(lenVC1-lenVC0.5, paired = FALSE, var.equal = FALSE)
t.test(lenVC2-lenVC1, paired = FALSE, var.equal = FALSE)
t.test(lenOJ1-lenVC1, paired = FALSE, var.equal = FALSE)
t.test(lenOJ2-lenVC2, paired = FALSE, var.equal = FALSE)
t.test(lenOJ1-lenVC1, paired = FALSE, var.equal = FALSE)
supp.OJ <- subset(ToothGrowth, supp =="OJ", select = len)
supp.VC <- subset(ToothGrowth, supp =="VC", select = len)
t.test(supp.OJ - supp.VC, paired = FALSE, var.equal = FALSE)
t.test(supp.OJ - supp.VC, paired = FALSE, var.equal = TRUE)
dose0.5 <- subset(ToothGrowth, dose =="0.5", select = len)
dose1 <- subset(ToothGrowth, dose =="1", select = len)
dose2 <- subset(ToothGrowth, dose =="2", select = len)
t.test(dose1 - dose0.5, paired = FALSE, var.equal = FALSE)
t.test(dose2 - dose1, paired = FALSE, var.equal = FALSE)
t.test(dose2 - dose1, paired = FALSE, var.equal = FALSE)$conf
t.test(len ~ dose, paired = FALSE, var.equal = FALSE)
t.test(len ~ dose, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
g <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
g$statistic
g$parameter
g$p.value
g$conf.int
g$estimate
g$null.value
g$alternative
g$method
g$data.name
mean(ToothGrowth$len)
t.test(lenOJ1-lenVC1, paired = FALSE, var.equal = FALSE)
View(ToothGrowth)
head(ToothGrowth)
?table
library(ggplot2)
?subset
len_OJ_0.5 <- subset(ToothGrowth, supp == "OJ" & dose = "0.5", select = len)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
len_OJ_0.5 <- subset(ToothGrowth, supp == "OJ" & dose = "0.5", select = len)
head(ToothGrowth)
unique(ToothGrowth$dose)
class(ToothGrowth$dose)
len_OJ_0.5 <- subset(ToothGrowth, supp == "OJ" & dose = 0.5, select = len)
len_OJ_0.5 <- subset(ToothGrowth, supp == "OJ", select = len)
len_OJ_0.5
subset(ToothGrowth, dose = 0.5, select = len)
subset(ToothGrowth, supp == "OJ" & dose = 0.5, select = len)
subset(ToothGrowth, supp == "OJ" & dose == 0.5, select = len)
subset(ToothGrowth, supp == "OJ" & dose == "0.5", select = len)
class(subset(ToothGrowth, supp == "OJ" & dose == "0.5", select = len))
len_OJ_0.5 <- subset(ToothGrowth, supp == "OJ" & dose == "0.5", select = len)
len_OJ_1 <- subset(ToothGrowth, supp == "OJ" & dose == "1", select = len)
len_OJ_2 <- subset(ToothGrowth, supp == "OJ" & dose == "2", select = len)
z <- t.test(len_OJ_1 - len_OJ_0.5, paired = FALSE, var.equal = FALSE)
z
var(len_OJ_0.5)
var(len_OJ_1)
mean(len_OJ_1)
len_OJ_0.5 <- as.vector(subset(ToothGrowth, supp == "OJ" & dose == "0.5", select = len))
class(len_OJ_0.5)
len_OJ_0.5
z
z$p.value
z$conf.int
?t.test
t.test(len_OJ_1 - len_OJ_0.5, paired = FALSE, var.equal = FALSE, alternative = "greater")
t.test(len_OJ_2 - len_OJ_1, paired = FALSE, var.equal = FALSE, alternative = "greater")
t.test(len_OJ_1 - len_OJ_0.5, paired = FALSE, var.equal = FALSE, alternative = "less")$p.value
library(MASS)
?shuttle
library(swirl)
swirl()
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[, 'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, family = "poisson", hits)
summary(mdl)
confint(mdl, "date")
exp(confint(mdl, "date"))
which.max(hits[, 'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, family = "poisson", hits, offset = log(visits+1))
mdl2 <- glm(simplystats ~ date, family = "poisson", hits, offset = log(visits+1))
qpois(.95, mdl2$fitted.values[704])
str(shuttle)
?shuttle
View(shuttle)
mdl <- glm(use ~ wind, family = "binomial", shuttle)
summary(mdl)
exp(mdl$coefficients)
exp(confint(mdl))
?mtcars
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
fit <- lm(mpg ~ as.factor(am), mtcars)
summary(fit)
plot(fit)
summary(fit)$sigma
dim(mtcars)
View(mtcars)
sqrt(sum(resid(fit)^2)/(30)))
sqrt(sum(resid(fit)^2)/30)
lm(formula = mpg ~ I(as.factor(am) - 1), data = mtcars)
fit <- lm(mpg ~ as.factor(am) - 1, mtcars)
summary(fit)
plot(mtcars$mpg, mtcars$am)
plot(mtcars$mpg, mtcars$am, col=(mtcars$am==0)*1+1)
?mtcars
pairs(mtcars)
fit1 <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
summary(fit1)$coef[,1][3]
# Unadjusted by weight models or in other words holding weight constant
fit2 <- lm(mpg ~ as.factor(cyl), mtcars)
summary(fit2)$coef[,1][3]
install.packages("rsconnect")
?step
library(ggplot2)
warnings()
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
str(mtcars)
t.test(mpg ~ am)
t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ am, data = mtcars)$p.value
basic <- lm(mpg ~ am, mtcars)
coef(basic)
summary(basic)
all <- lm(mpg ~ ., mtcars)
coef(all)
mdl <- lm(mpg ~ am +cyl+disp+hp+drat+wt+qsec+vs+gear+carb)
mdl <- lm(mpg ~ am +cyl+disp+hp+drat+wt+qsec+vs+gear+carb, mtcars)
coef(mdl)
ls()
rm(mdl)
ls()
mdl <- lm(mpg ~ am + cyl, mtcars)
coef(basic)
coef(mml)
coef(mdl)
rm(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
str(mtcars)
mdl <- lm(mpg ~ am + cyl, mtcars)
coef(basic)
coef(mdl)
mdl <- lm(mpg ~ am + disp, mtcars)
coef(mdl)
mdl <- lm(mpg ~ am + hp, mtcars)
coef(mdl)
mdl <- lm(mpg ~ am + drat, mtcars)
coef(mdl)
mdl <- lm(mpg ~ am + wt, mtcars)
coef(mdl)
all <- lm(mpg ~ ., mtcars)
vif(all)
library(car)
vif(all)
?mtcars
summary(lm(mpg~ am + cyl + disp + wt))
summary(lm(mpg~ am + cyl + disp + wt, mtcars))
order(vif(all))
sort(vif(all))
summary(lm(mpg ~ am + hp + wt+ cyl+disp))
summary(lm(mpg ~ am + hp + wt+ cyl+disp, mtcars))
summary(lm(mpg ~ am + hp + wt+ cyl+disp + qsec, carb, mtcars))
summary(lm(mpg ~ am + hp + wt+ cyl+disp + qsec + carb, mtcars))
summary(lm(mpg ~ am + hp + wt+ qsec, mtcars))
library(swirl)
swirl()
install.packages("shiny")
library(shiny)
runApp('Shiny/myApp')
runApp()
setwd("D:/R_practice/Shiny/myApp")
runApp()
?builder
head(faithful)
head(faithful[, 2])
setwd("D:/R_practice/Shiny/myApp")
runApp()
?seq
